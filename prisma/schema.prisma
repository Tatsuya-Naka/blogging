generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  topics        Topic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPrivate   Boolean    @default(false)
  bgimages    BgImage[]
  images      Image[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        TopicTag[]
}

model Tag {
  id     String     @id @default(cuid())
  name   String     @unique
  topics TopicTag[]
}

model TopicTag {
  topicId String
  tagId   String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([topicId, tagId])
}

model Image {
  id      String @id @default(cuid())
  url     String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model BgImage {
  id      String @id @default(cuid())
  url     String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}
